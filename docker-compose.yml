services:
  kafka:
    image: apache/kafka:3.9.1
    container_name: kafka
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
    ports:
      - "29092:29092"
    healthcheck:
      test: /opt/kafka/bin/kafka-cluster.sh cluster-id --bootstrap-server kafka:9092 || exit 1
      interval: 1s
      timeout: 60s
      retries: 60

  terraform:
    image: hashicorp/terraform:1.12.2
    container_name: terraform
    depends_on:
      kafka:
        condition: service_healthy
    working_dir: /workspace
    volumes:
      - ./terraform:/workspace
    entrypoint: [ "/bin/sh", "-c" ]
    command: [ "terraform init; terraform apply --auto-approve" ]

  alpha-unit:
    build:
      dockerfile: docker/alpha.Dockerfile
      context: pipeline-units
    container_name: alpha-unit
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_APPLICATION_ID: alpha-unit
      KAFKA_TOPIC_IN: first
      KAFKA_TOPIC_OUT: second
    depends_on:
      terraform:
        condition: service_completed_successfully

  beta-unit:
    build:
      dockerfile: docker/beta.Dockerfile
      context: pipeline-units
    container_name: beta-unit
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_APPLICATION_ID: beta-unit
      KAFKA_TOPIC_IN: second
      KAFKA_TOPIC_OUT: third
    depends_on:
      terraform:
        condition: service_completed_successfully

  omega-unit:
    build:
      dockerfile: docker/omega.Dockerfile
      context: pipeline-units
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_TOPIC: third
      KAFKA_GROUP_ID: 1
      OUTPUT_FILE: /opt/report/index.html
    volumes:
      - ./shared/report:/opt/report
    depends_on:
      terraform:
        condition: service_completed_successfully

  helper:
    image: apache/kafka:3.9.1
    container_name: helper
    depends_on:
      terraform:
        condition: service_completed_successfully
    volumes:
      - ./utils:/opt/utils
    entrypoint: [ "/bin/sh", "-c" ]
    command: |
      "
      /opt/kafka/bin/kafka-console-producer.sh --bootstrap-server=kafka:9092 --topic=first < /opt/utils/message.txt
      "

  server:
    image: nginx:1.28.0-alpine3.21
    container_name: server
    volumes:
      - ./shared:/usr/share/nginx/html
    ports:
      - "8090:80"
   
